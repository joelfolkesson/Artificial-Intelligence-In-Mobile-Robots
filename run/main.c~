#include "interface.h"
#include <math.h>
#define ROBOT_NUMBER "0"

//==============================================================================//
//                                  1B                                          //
//==============================================================================//

void Turn(float degrees){ 
	float radians = ((degrees*PI)/180.0);
	float steps   = ((26.7 * radians) /0.129);
	Steps s       = GetSteps();
	SetTargetSteps  (steps+s.l,-steps+s.r);
	printf          ("\n Done Turning %f Steps \n",steps);
	
	Sleep(1000);
}

void update_pos(Steps *prev){
	Steps s     = GetSteps();
	printf        ("\nPrev -> r %d\n",prev->r);

	float rWheelDist= ((float)s.r - (float)prev->r) * 0.129;
	float lWheelDist= ((float)s.l - (float)prev->l) * 0.129;
	
	float delta = (((float)s.r * 0.129) - ((float)s.l * 0.129)) /52.5;
	float dist  = ((rWheelDist + lWheelDist ) / 2.0);
	float dx    = dist * (cos(delta/2.0));
	printf("\nPRINT DX: %f\n",dx);
	float dy    = dist * (sin(delta/2.0));
	printf("\nPRINT DY: %f\n",dy);
	Posture p   = GetPosture();
	
	float x     = p.x + (dx * cos(p.th)) - (dy * sin(p.th));
	printf("\nPRINT X: %f\n",x);
	float y     = p.y + (dx * sin(p.th)) + (dy * cos(p.th));
	float th    = p.th + delta;
            th    = fmod(th,PI*2);
	printf        ("\nupdate_pos p.x = %.4f, p.y = %.4f, p.th = %.4f DEG \n",p.x,p.y,DEG(th));
	
	printf        ("\nDistance = %f\n",dist);
	*prev = GetSteps();
printf("GET STEPS : %d %d",s.l, s.r);
	SetPosture(x,y,th);
	p = GetPosture();
}


int main(int argc, char *argv[])
 {

//epuck connection
epuck(ROBOT_NUMBER);


Posture posture;     //get posture; float(x,y,th)

Steps steps;  // get steps: int (l,r)

Steps en_mm;    // steps to mm int (l,r)

Steps mm_en;    // mm to encoder int (l,r)

Speed speed;       // get speed int (l,r)

Speed speed_mm;       // get speed in mm int (l,r)

Sensors ir;       // get sensors vlotage unsigned int (sensor)



double vlin, vrot;
int i;


  printf("Starting...\n");

  //Example 0 (Note: LEDs only works with real robot)
 // bool led[8] = {1,1,1,1,1,1,1,1};  // eight leds
 // SetRingLED (led);


//SetTargetSteps(1000, 1000);


/* remove this line

  //Example 1
  //printf("\n Moving wheels for 1000 step counts\n");
  SetTargetSteps(1000, 1000);
  Sleep(3000);


  //Example 2
  printf("\n Moving wheels for -1000 step counts\n");
  SetTargetSteps(-1000, -1000);
  Sleep(3000);


  //Example 2
  printf("\n Moving wheels for 0 step counts\n");
  SetTargetSteps(0, 0);
  Sleep(3000);


  //Example 2
  printf("\n Moving right wheel for -1000 and left for 1000 step counts\n");
  SetTargetSteps(-1000, 1000);
  Sleep(3000);


  //Example 3
  printf("\n setting speed\n");
  SetSpeed(500, 500);
  Sleep(4000);
  Stop();


  //Example 4
  printf("\n Setting linear and angular velocities\n");
  SetPolarSpeed(50, RAD(-28));
  for (i=0;i<10;i++)
  {
    Sleep(100);
    GetPolarSpeed(&vlin, &vrot);
    printf("(vlin,vrot)=(%.2lf,%.2lf)\n", vlin, DEG(vrot));
  }
  Stop();


  //Example 5
  for (i=0;i<1000;i++)
  {
    ir = GetIR();
    printf("IR values: %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d\n",
           ir.sensor[0], ir.sensor[1], ir.sensor[2], ir.sensor[3],
           ir.sensor[4], ir.sensor[5], ir.sensor[6], ir.sensor[7]);
  }

remove this line*/

Posture now;
Steps prev = GetSteps();
now.x=0;
now.y=0;
now.th=0;
while(1){
	
	
	
	Steps s = GetSteps();
	now     = GetPosture();

	SetSpeed(100,100);
	
	update_pos(&prev);

	printf("\n now.x:  %f\n",now.x);
	printf("\n now.y:  %f\n",now.y);
	printf("\n now.th: %f\n",now.th);
	if(now.x >= 50 && now.x <= 52){
		Turn    (90.0);
		SetSpeed(50,50);
		Sleep   (1000);
	}
	if(now.x <= 52){
		printf("\nWE ARE DONE!\n");		
		Stop();
		break;
	}
	//if(now.th >= 50 || now.x <= -50){
	//	printf("Snurrat klart!");		
	//	Stop();
	//	break;
	//}

}





printf("\nDone...\n");
return (0);
 }

//==============================================================================//
//                                  end main                                    //
//==============================================================================//










